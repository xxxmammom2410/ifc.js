CSS2DRenderer CSS2DObjectをレンダリングするレンダラー

new CSS2DObject(HTMLobject) HTML要素にthreeの3次元空間座標を与える

three/examples/jsm/renderers/CSS2DRenderer.js

new CSS2DRenderer();

animation()
resize()

window.propmt("text")

CSS2DRenderer.domElement //HTML要素の設定
CSS2DRenderer.domElement.style.position


//render,animationで更新
labelRenderer.render(scene,camera);

___________________________________________________________________________________

import { CSS2DRenderer, CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js';

//DOMを作成
  const base = document.createElement('div');
  base.className = 'base-label';

//DOMをラップしたthreeオブジェクトのCSS2DObjectを作成
const ifcJsTitle = new CSS2DObject(DOM);

//DOMにthereeの空間座標を与える
ifcJsTitle.position.copy(location);
//threeのシーングラフに追加
scene.add(ifcJsTitle);


  //baseをDOMツリーから削除
  base.remove();
  //CSSS2DObjectのDOMをnullに
  ifcJsTitle.element = null;
  //シーングラフから削除
  ifcJsTitle.removeFromParent();


//  Set up 2d renderer
//CSSS2DObjectをレンダリングするCSS2DRendererのインスタンスを作成
const labelRenderer = new CSS2DRenderer();

//WebGLRendererの設定を踏襲
labelRenderer.setSize( window.innerWidth, window.innerHeight );
//.domElement　CSS2DRendererで作成されるルートdiv
labelRenderer.domElement.style.position = 'absolute';
labelRenderer.domElement.style.pointerEvents = 'none';
labelRenderer.domElement.style.top = '0px';
//元のHTMLのDOMツリーにCSS2DRendererのDOMを追加
document.body.appendChild( labelRenderer.domElement );



//他rendererと同様にresize,animate()で更新処理









window.addEventListener('dblclick', (event) => {
	mouse.x = event.clientX / canvas.clientWidth * 2 - 1;
	mouse.y = - (event.clientY / canvas.clientHeight) * 2 + 1;

	const intersects = raycaster.intersectObject(gltfScene);

  if(!intersects.length) {
    return;
  };

  const firstIntersection = intersects[0];
  const location =  firstIntersection.point;

  const result = window.prompt("Introduce message:");

  const base = document.createElement( 'div' );
  base.className = 'base-label';

  const deleteButton = document.createElement( 'button' );
  deleteButton.textContent = 'X';
  deleteButton.className = 'delete-button hidden';
  base.appendChild(deleteButton);

  base.onmouseenter = () => deleteButton.classList.remove('hidden');
  base.onmouseleave = () => deleteButton.classList.add('hidden');

  const postit = document.createElement( 'div' );
  postit.className = 'label';
  postit.textContent = result;
  base.appendChild(postit);

  const ifcJsTitle = new CSS2DObject( base );
  ifcJsTitle.position.copy(location);
  scene.add(ifcJsTitle);

  deleteButton.onclick = () => {
    base.remove();
    ifcJsTitle.element = null;
    ifcJsTitle.removeFromParent();
  }

});


// Animation

function animate() {
  const delta = clock.getDelta();
	cameraControls.update( delta );
	renderer.render( scene, camera );
  labelRenderer.render(scene, camera);
  requestAnimationFrame(animate);
}

animate();